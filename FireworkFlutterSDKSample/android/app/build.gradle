def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

/**
 * appid
 */
def fw_appid_production = ""
def fw_base_url_production = "https://api.fw.tv"
def fw_pixel_base_url_production = "https://p2.fwpixel.com/"
def fw_web_socket_production = "wss://api.firework.tv/socket/websocket"


def fw_appid_staging = ""
def fw_base_url_staging = ""
def fw_pixel_base_url_staging = ""
def fw_web_socket_staging = ""


android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.loopnow.fondor"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "2.4.4"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    signingConfigs {
        debug {
            v1SigningEnabled true
            v2SigningEnabled true
        }
        release {
            v1SigningEnabled true
            v2SigningEnabled true
        }
        profile {
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    // flutter build apk --flavor staging --debug
    // flutter run --flavor staging --debug
    buildTypes {
        // ./gradlew -v
        // ./gradlew clean
        // ./gradlew build --info
        // ./gradlew build --profile
        // ./gradlew build --info --debug --stacktrace
        // ./gradlew clean build --refresh-dependencies
        // ./gradlew assembleDebug
        // ./gradlew installDebug
        debug {
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
            consumerProguardFiles 'proguard-rules.pro'
            minifyEnabled false
            shrinkResources false
        }
        release {
            versionNameSuffix ""
            signingConfig signingConfigs.release
            consumerProguardFiles 'proguard-rules.pro'
            minifyEnabled true
            shrinkResources false
        }
        profile {
            versionNameSuffix "-profile"
            signingConfig signingConfigs.debug
            consumerProguardFiles 'proguard-rules.pro'
            minifyEnabled false
            shrinkResources false
        }
    }

    flavorDimensions "env"
    productFlavors {
        staging {
            dimension "env"
            versionNameSuffix "-staging"
            manifestPlaceholders["fw_appid"] = fw_appid_staging
            manifestPlaceholders["fw_base_url"] = fw_base_url_staging
            manifestPlaceholders["fw_pixel_base_url"] = fw_pixel_base_url_staging
            manifestPlaceholders["fw_web_socket"] = fw_web_socket_staging
        }
        production {
            dimension "env"
            versionNameSuffix ""
            manifestPlaceholders["fw_appid"] = fw_appid_production
            manifestPlaceholders["fw_base_url"] = fw_base_url_production
            manifestPlaceholders["fw_pixel_base_url"] = fw_pixel_base_url_production
            manifestPlaceholders["fw_web_socket"] = fw_web_socket_production
        }
    }
}

flutter {
    source '../..'
}

dependencies {
}

apply from: 'firework.gradle'

apply from: rootProject.file('lint.gradle')

def defaultFlavor = "production"
android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
        if (variant.name == "${defaultFlavor}Debug") {
            def taskSuffix = variant.name.capitalize()
            def assembleTaskName = "assemble${taskSuffix}"
            if (tasks.findByName(assembleTaskName)) {
                def copyAPKTask = tasks.create(name: "copyAndRenameApk${taskSuffix}", type: Copy) {
                    def apkBuildDir = "${buildDir}/outputs/apk"
                    def flavorsCapitalized = variant.productFlavors.name.withIndex().collect { flavor, index -> index == 0 ? flavor : flavor.capitalize() }
                    def originalDirPath = "${flavorsCapitalized.join()}/${variant.buildType.name}"
                    def originalFileName = "${project.archivesBaseName}-${variant.productFlavors.name.join('-')}-${variant.buildType.name}.apk"
                    from "${apkBuildDir}/${originalDirPath}/${originalFileName}"
                    into "${buildDir}/outputs/flutter-apk/"
                    rename("${originalFileName}", "${project.name}-${variant.buildType.name}.apk")
                }
                tasks[assembleTaskName].finalizedBy = [copyAPKTask]
            }
        }
    }
}