// google firebase
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'com.google.firebase.crashlytics'

//flutter run --dart-define=DEFINEAPP_NAME=awesomeApp1 --dart-define=DEFINEEXAMPLE_APP_SUFFIX=.dev
//flutter run --release --dart-define=DEFINEAppDistributionUploadReleaseIfNeeded=true --dart-define=DEFINEFIREBASE_CREDENTIAL_FILE_PATH=xxxxx
//flutter run --debug --dart-define=DEFINEAppDistributionUploadDebugIfNeeded=true --dart-define=DEFINEFIREBASE_CREDENTIAL_FILE_PATH=xxxxx
//flutter build apk --release --dart-define=DEFINEAppDistributionUploadReleaseIfNeeded=true --dart-define=DEFINEFIREBASE_CREDENTIAL_FILE_PATH=/Users/waylon/Downloads/fondor/firebase_token/firebase_token.json
//./gradlew appDistributionUploadReleaseIfNeeded -PFIREBASE_CREDENTIAL_FILE_PATH=/Users/waylon/Downloads/bogano/firebase_token/firebase_token.json
def dartEnvironmentVariables = [
        DEFINEAPP_NAME: 'fw.fondor',
//        DEFINEEXAMPLE_APP_SUFFIX: null // will be ignored
]
def firebase_service_credential_file_path = project.hasProperty('FIREBASE_CREDENTIAL_FILE_PATH') ? FIREBASE_CREDENTIAL_FILE_PATH : ""

if (project.hasProperty('dart-defines')) {
  dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
          .split(',')
          .collectEntries { entry ->
            def byteArray = Base64.getDecoder().decode(entry)
            def decodedString = new String(byteArray)
            def pair = decodedString.split('=')
            [(pair.first()): pair.last()]
          }

  if (dartEnvironmentVariables.DEFINEFIREBASE_CREDENTIAL_FILE_PATH != null) {
    firebase_service_credential_file_path = dartEnvironmentVariables.DEFINEFIREBASE_CREDENTIAL_FILE_PATH
  }
}

android {

  buildTypes {

    print("\n=================FIREBASE_CREDENTIAL_FILE_PATH====================\n")
    print(firebase_service_credential_file_path)
    print("\n=================FIREBASE_CREDENTIAL_FILE_PATH====================\n")

    debug {
      firebaseAppDistribution {
        releaseNotes="debug"
        groups="email-notification"
        serviceCredentialsFile=firebase_service_credential_file_path
      }
    }

    release {
      firebaseAppDistribution {
        releaseNotes="release"
        groups="email-notification"
        serviceCredentialsFile=firebase_service_credential_file_path
      }
    }
  }
}

dependencies {
  // Import the BoM for the Firebase platform
  implementation platform('com.google.firebase:firebase-bom:29.0.3')

  // Declare the dependencies for the Crashlytics and Analytics libraries
  // When using the BoM, you don't specify versions in Firebase library dependencies
  implementation 'com.google.firebase:firebase-crashlytics-ktx'
  implementation 'com.google.firebase:firebase-analytics-ktx'
}

afterEvaluate {
  try {
    appDistributionUploadReleaseIfNeeded.dependsOn appDistributionUploadRelease
    appDistributionUploadDebugIfNeeded.dependsOn appDistributionUploadDebug

    appDistributionUploadDebug.dependsOn processDebugGoogleServices
    appDistributionUploadRelease.dependsOn processReleaseGoogleServices
    appDistributionUploadIfNeeded.dependsOn appDistributionUploadReleaseIfNeeded
    appDistributionUploadIfNeeded.dependsOn appDistributionUploadDebugIfNeeded

//    if (dartEnvironmentVariables.DEFINEAppDistributionUploadDebugIfNeeded) {
//    }
//    if (dartEnvironmentVariables.DEFINEAppDistributionUploadReleaseIfNeeded) {
//      print("\n=============\n")
//      print(dartEnvironmentVariables.DEFINEAppDistributionUploadReleaseIfNeeded)
//      print("\n=============\n")
//    }

  } catch (Exception e) {
    e.printStackTrace()
  }
}

task appDistributionUploadIfNeeded()

task appDistributionUploadDebugIfNeeded()

task appDistributionUploadReleaseIfNeeded()
